import os
import shutil
import threading
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import numpy as np
import librosa
import soundfile as sf
from scipy.signal import butter, sosfilt
from pathlib import Path
import datetime

def get_category(file_name):
    fname = file_name.lower()
    if "footstep" in fname or "step" in fname: return 'Footstep'
    if "impact" in fname or "attack" in fname or "hit" in fname: return 'Attack/Impact'
    if "ui_click" in fname or "ui_sfx" in fname or "ui" in fname or "click" in fname: return 'UI SFX'
    if "voice" in fname or "dialog" in fname or "speech" in fname: return 'Voice/Dialog'
    if "ambient" in fname: return 'Ambient'
    if "env" in fname or "environment" in fname: return 'Environment Tone'
    if "music" in fname: return 'Music Background'
    if "rattle" in fname or "window" in fname or "door" in fname or "creak" in fname: return 'Environment Tone'
    if "rain" in fname or "water" in fname or "drip" in fname: return 'Ambient'
    if "wind" in fname or "air" in fname: return 'Ambient'
    if "metal" in fname or "wood" in fname or "glass" in fname: return 'Attack/Impact'
    return None

# ==============================================================================
# PRESETS ƒê√É C·∫¨P NH·∫¨T V·ªöI LOGIC M·ªöI
# 'attenuation_db': ƒê·ªô suy gi·∫£m (b·∫±ng dB) cho c√°c t·∫ßn s·ªë b√™n ngo√†i d·∫£i mong mu·ªën.
# ==============================================================================
PRESETS = {
    'UI SFX':     {'lowcut': 200, 'highcut': 6000,  'volume': 0,   'attenuation_db': -60},
    'Footstep':   {'lowcut': 100, 'highcut': 5000,  'volume': -2,  'attenuation_db': -60},
    'Attack/Impact': {'lowcut': 150, 'highcut': 7000,  'volume': -2,  'attenuation_db': -60},
    'Voice/Dialog':  {'lowcut': 150, 'highcut': 8000, 'volume': 0,   'attenuation_db': -60},
    'Ambient':    {'lowcut': 80,  'highcut': 8000, 'volume': -8,  'attenuation_db': -50},
    'Environment Tone': {'lowcut': 60,  'highcut': 6000, 'volume': -14, 'attenuation_db': -50},
    'Music Background': {'lowcut': 100, 'highcut': 12000, 'volume': -8,  'attenuation_db': -60}
}

# ------------------------------------------------------------------------------
# H√ÄM L·ªåC HELPER (GI·ªÆ NGUY√äN)
# ------------------------------------------------------------------------------
def butter_bandpass_filter(data, lowcut, highcut, sr, order=8):
    nyq = 0.5 * sr
    low = lowcut / nyq
    high = highcut / nyq
    sos = butter(order, [low, high], analog=False, btype='band', output='sos')
    
    if len(data.shape) > 1:
        filtered = np.zeros_like(data)
        for ch in range(data.shape[0]):
            filtered[ch] = sosfilt(sos, data[ch])
        return filtered
    else:
        filtered = sosfilt(sos, data)
        return filtered

# ==============================================================================
# H√ÄM L·ªåC HYBRID M·ªöI - TR√ÅI TIM C·ª¶A LOGIC M·ªöI
# ==============================================================================
def hybrid_brickwall_filter(data, lowcut, highcut, sr, attenuation_db=-60):
    """
    T·∫°o hi·ªáu ·ª©ng 'brickwall' b·∫±ng c√°ch t√°ch t√≠n hi·ªáu th√†nh pass-band v√† stop-band,
    sau ƒë√≥ gi·∫£m gain c·ªßa stop-band v√† t√°i t·ªï h·ª£p ch√∫ng.
    """
    # 1. T√°ch t√≠n hi·ªáu Pass-band (d·∫£i t·∫ßn mu·ªën gi·ªØ l·∫°i)
    # S·ª≠ d·ª•ng order cao h∆°n (v√≠ d·ª•: 8) ƒë·ªÉ t√°ch b·∫°ch h∆°n
    y_pass = butter_bandpass_filter(data, lowcut, highcut, sr, order=8)
    
    # 2. T·∫°o t√≠n hi·ªáu Stop-band (ph·∫ßn c√≤n l·∫°i) b·∫±ng c√°ch l·∫•y g·ªëc tr·ª´ ƒëi pass-band
    y_stop = data - y_pass
    
    # 3. T√≠nh to√°n h·ªá s·ªë gain ƒë·ªÉ gi·∫£m √¢m cho stop-band
    reduction_gain = 10 ** (attenuation_db / 20.0)
    
    # 4. Gi·∫£m √¢m stop-band
    y_stop_attenuated = y_stop * reduction_gain
    
    # 5. T√°i t·ªï h·ª£p t√≠n hi·ªáu: Pass-band + Stop-band ƒë√£ gi·∫£m √¢m
    y_hybrid = y_pass + y_stop_attenuated
    
    return y_hybrid

# ==============================================================================
# H√ÄM X·ª¨ L√ù √ÇM THANH ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T
# ==============================================================================
def process_audio_file(audio_path, output_dir):
    file_name = os.path.basename(audio_path)
    category = get_category(file_name)
    if category is None:
        return f"‚ùå Kh√¥ng x√°c ƒë·ªãnh lo·∫°i √¢m thanh cho file: {file_name}"
    
    try:
        preset = PRESETS[category]
        
        print(f"üéµ X·ª≠ l√Ω {file_name} v·ªõi preset {category}:")
        print(f"   - D·∫£i t·∫ßn: {preset['lowcut']}Hz - {preset['highcut']}Hz")
        print(f"   - Suy gi·∫£m ngo√†i d·∫£i: {preset['attenuation_db']}dB")
        print(f"   - Volume t·ªïng: {preset['volume']}dB")
        
        try:
            y, sr = librosa.load(audio_path, sr=None, mono=False)
        except Exception:
            try:
                data, sr = sf.read(audio_path)
                y = data.T
                if len(y.shape) == 1:
                    y = y.reshape(1, -1)
            except Exception as sf_error:
                return f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file √¢m thanh '{file_name}': {str(sf_error)}"
        
        print(f"   - Sample rate: {sr}Hz, Channels: {y.shape[0] if len(y.shape) > 1 else 1}")
        
        # --- THAY ƒê·ªîI QUAN TR·ªåNG ·ªû ƒê√ÇY ---
        # √Åp d·ª•ng b·ªô l·ªçc Hybrid m·ªõi
        y_eq = hybrid_brickwall_filter(y, preset['lowcut'], preset['highcut'], sr, preset['attenuation_db'])

        # √Åp d·ª•ng gain t·ªïng th·ªÉ
        total_gain = 10 ** (preset['volume'] / 20)
        y_processed = y_eq * total_gain
        # ---------------------------------
        
        if np.any(np.isnan(y_processed)) or np.any(np.isinf(y_processed)):
            return f"‚ùå D·ªØ li·ªáu √¢m thanh l·ªói (NaN/Inf) cho file: {file_name}"
        
        name, ext = os.path.splitext(file_name)
        output_name = f"processed_{name}{ext}"
        output_path = os.path.join(output_dir, output_name)
        
        try:
            sf.write(output_path, y_processed.T.astype(np.float32), sr)
        except Exception as write_error:
            return f"‚ùå L·ªói ghi file '{file_name}': {str(write_error)}"
        
        return f"‚úÖ {file_name} ‚Üí {output_name} ({category})"
        
    except Exception as e:
        return f"‚ùå L·ªói x·ª≠ l√Ω '{file_name}': {str(e)}"

# ==============================================================================
# C√ÅC H√ÄM GIAO DI·ªÜN V√Ä X·ª¨ L√ù H√ÄNG LO·∫†T (GI·ªÆ NGUY√äN)
# ==============================================================================
def get_audio_files_from_folder(folder_path):
    audio_extensions = ['.wav', '.mp3', '.flac', '.ogg', '.m4a', '.aac']
    audio_files = []
    for root, _, files in os.walk(folder_path):
        for f in files:
            if any(f.lower().endswith(ext) for ext in audio_extensions):
                audio_files.append(os.path.join(root, f))
    return audio_files

def batch_process(folder_path, dest_folder, log_func):
    audio_files = get_audio_files_from_folder(folder_path)
    if not audio_files:
        log_func("Kh√¥ng t√¨m th·∫•y file √¢m thanh n√†o trong folder!")
        return
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    folder_name = os.path.basename(folder_path)
    output_dir = Path(dest_folder) / f"SoundFix_{folder_name}_{timestamp}"
    output_dir.mkdir(parents=True, exist_ok=True)
    
    log_func(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(audio_files)} file...")
    log_func(f"Th∆∞ m·ª•c output: {output_dir}")
    
    success_count = 0
    error_count = 0
    
    for i, file_path in enumerate(audio_files):
        msg = process_audio_file(file_path, output_dir)
        log_func(f"[{i+1}/{len(audio_files)}] {msg}")
        
        if "‚úÖ" in msg:
            success_count += 1
        else:
            error_count += 1
    
    log_func(f"\nüìä Th·ªëng k√™:")
    log_func(f"‚úÖ Th√†nh c√¥ng: {success_count} file")
    log_func(f"‚ùå L·ªói: {error_count} file")
    log_func(f"üìÅ Th∆∞ m·ª•c output: {output_dir}")
    
    messagebox.showinfo("Xong!", f"ƒê√£ x·ª≠ l√Ω xong!\n‚úÖ Th√†nh c√¥ng: {success_count} file\n‚ùå L·ªói: {error_count} file\nüìÅ Th∆∞ m·ª•c output: {output_dir}")

def run_app():
    root = tk.Tk()
    root.title("SoundFix - B·ªô x·ª≠ l√Ω √¢m thanh t·ª± ƒë·ªông cho Game")
    root.geometry("700x500")

    folder_var = tk.StringVar()
    dest_var = tk.StringVar()

    def choose_folder():
        path = filedialog.askdirectory(title="Ch·ªçn folder √¢m thanh g·ªëc")
        if path:
            folder_var.set(path)

    def choose_dest():
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ƒë√≠ch ƒë·ªÉ l∆∞u file ƒë√£ x·ª≠ l√Ω")
        if path:
            dest_var.set(path)

    def log(msg):
        log_box.insert(tk.END, msg + "\n")
        log_box.see(tk.END)
        root.update()

    def start_process():
        folder = folder_var.get()
        dest = dest_var.get()
        log_box.delete(1.0, tk.END)
        if not folder or not os.path.isdir(folder):
            messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn folder √¢m thanh h·ª£p l·ªá!")
            return
        if not dest or not os.path.isdir(dest):
            messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn th∆∞ m·ª•c ƒë√≠ch h·ª£p l·ªá!")
            return
        threading.Thread(target=batch_process, args=(folder, dest, log), daemon=True).start()

    tk.Label(root, text="1. Ch·ªçn folder ch·ª©a √¢m thanh g·ªëc:").pack(anchor='w', padx=10, pady=(10,0))
    frame1 = tk.Frame(root)
    frame1.pack(fill='x', padx=10)
    tk.Entry(frame1, textvariable=folder_var, width=60).pack(side='left', expand=True, fill='x')
    tk.Button(frame1, text="Ch·ªçn...", command=choose_folder).pack(side='left', padx=5)

    tk.Label(root, text="2. Ch·ªçn th∆∞ m·ª•c ƒë√≠ch ƒë·ªÉ l∆∞u file ƒë√£ x·ª≠ l√Ω:").pack(anchor='w', padx=10, pady=(10,0))
    frame2 = tk.Frame(root)
    frame2.pack(fill='x', padx=10)
    tk.Entry(frame2, textvariable=dest_var, width=60).pack(side='left', expand=True, fill='x')
    tk.Button(frame2, text="Ch·ªçn...", command=choose_dest).pack(side='left', padx=5)

    tk.Button(root, text="3. X·ª≠ l√Ω v√† xu·∫•t file", command=start_process, bg='#ff8800', fg='white', font=('Arial', 12, 'bold')).pack(pady=15)

    tk.Label(root, text="Log ti·∫øn tr√¨nh:").pack(anchor='w', padx=10)
    log_box = scrolledtext.ScrolledText(root, height=15, font=('Consolas', 10))
    log_box.pack(fill='both', expand=True, padx=10, pady=(0,10))

    root.mainloop()

if __name__ == "__main__":
    run_app()