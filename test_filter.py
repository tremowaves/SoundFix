import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter, freqz
import librosa
import soundfile as sf

def butter_filter(data, sr, lowcut, highcut):
    """
    √Åp d·ª•ng bandpass filter v·ªõi Butterworth
    """
    # ƒê·∫£m b·∫£o t·∫ßn s·ªë c·∫Øt h·ª£p l·ªá
    nyq = 0.5 * sr
    low = lowcut / nyq
    high = highcut / nyq
    
    # Ki·ªÉm tra t·∫ßn s·ªë c·∫Øt c√≥ h·ª£p l·ªá kh√¥ng
    if low >= 1.0 or high >= 1.0:
        print(f"Warning: T·∫ßn s·ªë c·∫Øt qu√° cao! low={lowcut}Hz, high={highcut}Hz, nyq={nyq}Hz")
        return data
    
    if low >= high:
        print(f"Warning: T·∫ßn s·ªë th·∫•p >= t·∫ßn s·ªë cao! low={lowcut}Hz, high={highcut}Hz")
        return data
    
    # T·∫°o filter v·ªõi order cao h∆°n ƒë·ªÉ c√≥ hi·ªáu ·ª©ng r√µ r√†ng h∆°n
    b, a = butter(4, [low, high], btype='band')
    
    # √Åp d·ª•ng filter
    filtered_data = lfilter(b, a, data)
    
    return filtered_data, b, a

def plot_filter_response(b, a, sr, lowcut, highcut):
    """V·∫Ω ƒë√°p ·ª©ng t·∫ßn s·ªë c·ªßa filter"""
    w, h = freqz(b, a, worN=8000)
    plt.figure(figsize=(12, 8))
    
    # ƒê√°p ·ª©ng t·∫ßn s·ªë
    plt.subplot(2, 2, 1)
    plt.plot(0.5 * sr * w / np.pi, np.abs(h), 'b')
    plt.plot([lowcut, lowcut], [0, 1], 'r--', label=f'Lowcut: {lowcut}Hz')
    plt.plot([highcut, highcut], [0, 1], 'r--', label=f'Highcut: {highcut}Hz')
    plt.xlabel('T·∫ßn s·ªë [Hz]')
    plt.ylabel('ƒê·ªô l·ªõn')
    plt.title('ƒê√°p ·ª©ng t·∫ßn s·ªë c·ªßa Bandpass Filter')
    plt.legend()
    plt.grid(True)
    
    # Phase response
    plt.subplot(2, 2, 2)
    plt.plot(0.5 * sr * w / np.pi, np.unwrap(np.angle(h)) * 180 / np.pi, 'b')
    plt.xlabel('T·∫ßn s·ªë [Hz]')
    plt.ylabel('Phase [degrees]')
    plt.title('Phase Response')
    plt.grid(True)
    
    # Log scale
    plt.subplot(2, 2, 3)
    plt.semilogx(0.5 * sr * w / np.pi, 20 * np.log10(np.abs(h)), 'b')
    plt.axvline(lowcut, color='r', linestyle='--', label=f'Lowcut: {lowcut}Hz')
    plt.axvline(highcut, color='r', linestyle='--', label=f'Highcut: {highcut}Hz')
    plt.xlabel('T·∫ßn s·ªë [Hz]')
    plt.ylabel('Magnitude [dB]')
    plt.title('ƒê√°p ·ª©ng t·∫ßn s·ªë (dB scale)')
    plt.legend()
    plt.grid(True)
    
    plt.tight_layout()
    plt.show()

def test_filter():
    """Test filter v·ªõi t√≠n hi·ªáu t·ªïng h·ª£p"""
    sr = 44100  # Sample rate
    duration = 2.0  # Th·ªùi gian
    t = np.linspace(0, duration, int(sr * duration), False)
    
    # T·∫°o t√≠n hi·ªáu t·ªïng h·ª£p v·ªõi nhi·ªÅu t·∫ßn s·ªë
    signal = (np.sin(2 * np.pi * 50 * t) +      # 50 Hz (bass)
              np.sin(2 * np.pi * 500 * t) +     # 500 Hz (mid)
              np.sin(2 * np.pi * 5000 * t) +    # 5 kHz (high)
              np.sin(2 * np.pi * 15000 * t))    # 15 kHz (very high)
    
    # Test v·ªõi preset Ambient
    lowcut = 80
    highcut = 8000
    
    print(f"üéµ Test filter v·ªõi preset Ambient:")
    print(f"   - Lowcut: {lowcut}Hz")
    print(f"   - Highcut: {highcut}Hz")
    print(f"   - Sample rate: {sr}Hz")
    
    # √Åp d·ª•ng filter
    filtered_signal, b, a = butter_filter(signal, sr, lowcut, highcut)
    
    # V·∫Ω ƒë√°p ·ª©ng t·∫ßn s·ªë
    plot_filter_response(b, a, sr, lowcut, highcut)
    
    # V·∫Ω t√≠n hi·ªáu g·ªëc v√† ƒë√£ l·ªçc
    plt.figure(figsize=(15, 10))
    
    # Time domain
    plt.subplot(2, 2, 1)
    plt.plot(t[:1000], signal[:1000], 'b', label='G·ªëc')
    plt.xlabel('Th·ªùi gian [s]')
    plt.ylabel('Amplitude')
    plt.title('T√≠n hi·ªáu g·ªëc (1000 samples ƒë·∫ßu)')
    plt.legend()
    plt.grid(True)
    
    plt.subplot(2, 2, 2)
    plt.plot(t[:1000], filtered_signal[:1000], 'r', label='ƒê√£ l·ªçc')
    plt.xlabel('Th·ªùi gian [s]')
    plt.ylabel('Amplitude')
    plt.title('T√≠n hi·ªáu ƒë√£ l·ªçc (1000 samples ƒë·∫ßu)')
    plt.legend()
    plt.grid(True)
    
    # Frequency domain
    plt.subplot(2, 2, 3)
    fft_original = np.fft.fft(signal)
    freqs = np.fft.fftfreq(len(signal), 1/sr)
    plt.plot(freqs[:len(freqs)//2], np.abs(fft_original)[:len(freqs)//2], 'b', label='G·ªëc')
    plt.axvline(lowcut, color='r', linestyle='--', label=f'Lowcut: {lowcut}Hz')
    plt.axvline(highcut, color='r', linestyle='--', label=f'Highcut: {highcut}Hz')
    plt.xlabel('T·∫ßn s·ªë [Hz]')
    plt.ylabel('Magnitude')
    plt.title('Spectrum g·ªëc')
    plt.legend()
    plt.grid(True)
    plt.xlim(0, 20000)
    
    plt.subplot(2, 2, 4)
    fft_filtered = np.fft.fft(filtered_signal)
    plt.plot(freqs[:len(freqs)//2], np.abs(fft_filtered)[:len(freqs)//2], 'r', label='ƒê√£ l·ªçc')
    plt.axvline(lowcut, color='r', linestyle='--', label=f'Lowcut: {lowcut}Hz')
    plt.axvline(highcut, color='r', linestyle='--', label=f'Highcut: {highcut}Hz')
    plt.xlabel('T·∫ßn s·ªë [Hz]')
    plt.ylabel('Magnitude')
    plt.title('Spectrum ƒë√£ l·ªçc')
    plt.legend()
    plt.grid(True)
    plt.xlim(0, 20000)
    
    plt.tight_layout()
    plt.show()
    
    # L∆∞u file test
    sf.write('test_original.wav', signal, sr)
    sf.write('test_filtered.wav', filtered_signal, sr)
    print("‚úÖ ƒê√£ l∆∞u file test_original.wav v√† test_filtered.wav")

if __name__ == "__main__":
    test_filter() 