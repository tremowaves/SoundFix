import os
import gradio as gr
import numpy as np
import librosa
import soundfile as sf
from scipy.signal import butter, lfilter
import zipfile
import tempfile
import shutil
from pathlib import Path
import glob
from pydub import AudioSegment

# ƒê·ªãnh nghƒ©a preset cho t·ª´ng lo·∫°i √¢m thanh
PRESETS = {
    'UI SFX':     {'lowcut': 100, 'highcut': 8000,  'volume': 0},
    'Footstep':   {'lowcut': 60,  'highcut': 7000,  'volume': -2},
    'Attack/Impact': {'lowcut': 80,  'highcut': 9000,  'volume': -2},
    'Voice/Dialog':  {'lowcut': 80,  'highcut': 12000, 'volume': 0},
    'Ambient':    {'lowcut': 60,  'highcut': 10000, 'volume': -8},
    'Environment Tone': {'lowcut': 50,  'highcut': 10000, 'volume': -14},
    'Music Background': {'lowcut': 40,  'highcut': 16000, 'volume': -8}
}

def get_category(file_name):
    fname = file_name.lower()
    if fname.startswith('footstep'):
        return 'Footstep'
    elif fname.startswith('impact') or fname.startswith('attack'):
        return 'Attack/Impact'
    elif fname.startswith('ui_click') or fname.startswith('ui_sfx'):
        return 'UI SFX'
    elif fname.startswith('voice') or fname.startswith('dialog'):
        return 'Voice/Dialog'
    elif fname.startswith('ambient'):
        return 'Ambient'
    elif fname.startswith('env'):
        return 'Environment Tone'
    elif fname.startswith('music'):
        return 'Music Background'
    else:
        return None

def butter_filter(data, sr, lowcut, highcut):
    nyq = 0.5 * sr
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(2, [low, high], btype='band')
    return lfilter(b, a, data)

def process_audio_file(audio_path, output_dir):
    file_name = os.path.basename(audio_path)
    category = get_category(file_name)
    if category is None:
        return f"‚ùå Kh√¥ng x√°c ƒë·ªãnh lo·∫°i √¢m thanh cho file: {file_name}"
    try:
        preset = PRESETS[category]
        audio = AudioSegment.from_file(audio_path)
        # ƒêi·ªÅu ch·ªânh volume (dB)
        audio = audio + preset['volume']
        # L∆∞u file
        name, ext = os.path.splitext(file_name)
        output_name = f"processed_{name}.wav"
        output_path = os.path.join(output_dir, output_name)
        audio.export(output_path, format="wav")
        return f"‚úÖ {file_name} ‚Üí {output_name} ({category})"
    except Exception as e:
        return f"‚ùå L·ªói x·ª≠ l√Ω '{file_name}': {str(e)}"

def get_audio_files_from_folder(folder_path):
    """L·∫•y t·∫•t c·∫£ file √¢m thanh t·ª´ folder"""
    audio_extensions = ['*.wav', '*.mp3', '*.flac', '*.ogg', '*.m4a', '*.aac']
    audio_files = []
    
    for ext in audio_extensions:
        pattern = os.path.join(folder_path, '**', ext)
        audio_files.extend(glob.glob(pattern, recursive=True))
    
    return audio_files

def process_folder(folder_path, output_folder=None):
    """X·ª≠ l√Ω to√†n b·ªô folder √¢m thanh"""
    if not folder_path:
        return "Ch∆∞a ch·ªçn folder n√†o!", "", None, ""
    
    # L·∫•y t·∫•t c·∫£ file √¢m thanh trong folder
    audio_files = get_audio_files_from_folder(folder_path)
    
    if not audio_files:
        return "Kh√¥ng t√¨m th·∫•y file √¢m thanh n√†o trong folder!", "", None, ""
    
    # T·∫°o th∆∞ m·ª•c SoundFix
    soundfix_dir = Path("SoundFix")
    soundfix_dir.mkdir(exist_ok=True)
    
    # T·∫°o th∆∞ m·ª•c con v·ªõi t√™n folder g·ªëc + timestamp
    import datetime
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    folder_name = os.path.basename(folder_path)
    output_dir = soundfix_dir / f"{folder_name}_processed_{timestamp}"
    output_dir.mkdir(exist_ok=True)
    
    results = []
    total_files = len(audio_files)
    
    for i, file_path in enumerate(audio_files):
        # C·∫≠p nh·∫≠t progress
        progress = (i + 1) / total_files * 100
        result = process_audio_file(file_path, output_dir)
        results.append(f"[{i+1}/{total_files}] {result}")
        
        # Yield ƒë·ªÉ c·∫≠p nh·∫≠t UI real-time
        yield f"ƒêang x·ª≠ l√Ω... {progress:.1f}% ({i+1}/{total_files})", "\n".join(results), None, ""
    
    # T·∫°o file ZIP ch·ª©a t·∫•t c·∫£ k·∫øt qu·∫£
    zip_name = f"SoundFix_{folder_name}_{timestamp}.zip"
    zip_path = output_dir.parent / zip_name
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in output_dir.rglob("*"):
            if file_path.is_file():
                zipf.write(file_path, file_path.name)
    
    # Copy file ZIP v√†o th∆∞ m·ª•c ƒë√≠ch n·∫øu ƒë∆∞·ª£c ch·ªçn
    final_message = f"‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {total_files} file t·ª´ folder '{folder_name}'.\nüìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_dir}\nüì¶ File ZIP: {zip_path}"
    
    if output_folder:
        try:
            dest_zip_path = Path(output_folder) / zip_name
            shutil.copy2(zip_path, dest_zip_path)
            final_message += f"\nüìÇ ƒê√£ copy file ZIP v√†o: {dest_zip_path}"
        except Exception as e:
            final_message += f"\n‚ö†Ô∏è Kh√¥ng th·ªÉ copy file ZIP: {str(e)}"
    
    yield f"Ho√†n th√†nh 100% ({total_files}/{total_files})", "\n".join(results), str(zip_path), final_message

def process_batch_files(files, output_folder=None):
    """X·ª≠ l√Ω h√†ng lo·∫°t nhi·ªÅu file √¢m thanh (gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch)"""
    if not files:
        return "Ch∆∞a ch·ªçn file n√†o!", "", None, ""
    
    # T·∫°o th∆∞ m·ª•c SoundFix
    soundfix_dir = Path("SoundFix")
    soundfix_dir.mkdir(exist_ok=True)
    
    # T·∫°o th∆∞ m·ª•c con v·ªõi timestamp
    import datetime
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = soundfix_dir / f"processed_{timestamp}"
    output_dir.mkdir(exist_ok=True)
    
    results = []
    total_files = len(files)
    
    for i, file_path in enumerate(files):
        # C·∫≠p nh·∫≠t progress
        progress = (i + 1) / total_files * 100
        result = process_audio_file(file_path, output_dir)
        results.append(f"[{i+1}/{total_files}] {result}")
        
        # Yield ƒë·ªÉ c·∫≠p nh·∫≠t UI real-time
        yield f"ƒêang x·ª≠ l√Ω... {progress:.1f}% ({i+1}/{total_files})", "\n".join(results), None, ""
    
    # T·∫°o file ZIP ch·ª©a t·∫•t c·∫£ k·∫øt qu·∫£
    zip_path = output_dir.parent / f"SoundFix_Results_{timestamp}.zip"
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in output_dir.rglob("*"):
            if file_path.is_file():
                zipf.write(file_path, file_path.name)
    
    final_message = f"‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {total_files} file.\nüìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_dir}\nüì¶ File ZIP: {zip_path}"
    
    if output_folder:
        try:
            dest_zip_path = Path(output_folder) / f"SoundFix_Results_{timestamp}.zip"
            shutil.copy2(zip_path, dest_zip_path)
            final_message += f"\nüìÇ ƒê√£ copy file ZIP v√†o: {dest_zip_path}"
        except Exception as e:
            final_message += f"\n‚ö†Ô∏è Kh√¥ng th·ªÉ copy file ZIP: {str(e)}"
    
    yield f"Ho√†n th√†nh 100% ({total_files}/{total_files})", "\n".join(results), str(zip_path), final_message

def create_demo():
    with gr.Blocks(title="SoundFix - B·ªô x·ª≠ l√Ω √¢m thanh t·ª± ƒë·ªông") as demo:
        gr.Markdown("""
        # üéµ SoundFix - B·ªô x·ª≠ l√Ω √¢m thanh t·ª± ƒë·ªông cho Game
        
        ### üöÄ C√°ch s·ª≠ d·ª•ng ƒë∆°n gi·∫£n:
        1. **Ch·ªçn folder ch·ª©a √¢m thanh** (b∆∞·ªõc duy nh·∫•t c·∫ßn l√†m th·ªß c√¥ng)
        2. **Ch·ªçn th∆∞ m·ª•c ƒë√≠ch** ƒë·ªÉ l∆∞u file ZIP (t√πy ch·ªçn)
        3. **Nh·∫•n "X·ª≠ l√Ω folder"** - ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông:
           - T√¨m t·∫•t c·∫£ file √¢m thanh trong folder
           - Ph√¢n lo·∫°i v√† x·ª≠ l√Ω theo preset
           - T·∫°o file ZIP k·∫øt qu·∫£
           - Copy file ZIP v√†o th∆∞ m·ª•c ƒë√≠ch (n·∫øu ch·ªçn)
        4. **T·∫£i file ZIP** ch·ª©a t·∫•t c·∫£ k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω
        
        ### üìÅ H·ªó tr·ª£ ƒë·ªãnh d·∫°ng:
        - WAV, MP3, FLAC, OGG, M4A, AAC
        
        ### üéõÔ∏è Preset t·ª± ƒë·ªông:
        - `Footstep_*` ‚Üí Preset Footstep
        - `Impact_*`, `Attack_*` ‚Üí Preset Attack/Impact  
        - `UI_Click_*`, `UI_SFX_*` ‚Üí Preset UI SFX
        - `Voice_*`, `Dialog_*` ‚Üí Preset Voice/Dialog
        - `Ambient_*` ‚Üí Preset Ambient
        - `Env_*` ‚Üí Preset Environment Tone
        - `Music_*` ‚Üí Preset Music Background
        """)
        
        with gr.Tab("üìÅ X·ª≠ l√Ω Folder (Khuy·∫øn ngh·ªã)"):
            with gr.Row():
                with gr.Column(scale=2):
                    folder_input = gr.File(
                        label="üìÅ Ch·ªçn folder ch·ª©a √¢m thanh (k√©o th·∫£ ho·∫∑c click ƒë·ªÉ ch·ªçn)",
                        file_count="directory",
                        file_types=["audio"]
                    )
                    
                    output_folder_input = gr.File(
                        label="üìÇ Ch·ªçn th∆∞ m·ª•c ƒë√≠ch ƒë·ªÉ l∆∞u file ZIP (t√πy ch·ªçn)",
                        file_count="directory"
                    )
                    
                    process_folder_btn = gr.Button(
                        "üöÄ X·ª≠ l√Ω to√†n b·ªô folder", 
                        variant="primary",
                        size="lg"
                    )
                    
                    progress_text = gr.Textbox(
                        label="üìä Ti·∫øn tr√¨nh",
                        value="S·∫µn s√†ng x·ª≠ l√Ω...",
                        interactive=False
                    )
                
                with gr.Column(scale=1):
                    download_btn = gr.File(
                        label="üì¶ T·∫£i file ZIP k·∫øt qu·∫£",
                        visible=False
                    )
            
            output_text = gr.Textbox(
                label="üìã K·∫øt qu·∫£ x·ª≠ l√Ω",
                lines=15,
                max_lines=20,
                interactive=False
            )
            
            final_message_text = gr.Textbox(
                label="üì¢ Th√¥ng b√°o cu·ªëi",
                lines=3,
                interactive=False
            )
            
            # X·ª≠ l√Ω s·ª± ki·ªán folder
            def on_process_folder(folder, output_folder):
                if not folder:
                    return "Ch∆∞a ch·ªçn folder n√†o!", "", None, ""
                return process_folder(folder, output_folder)
            
            process_folder_btn.click(
                on_process_folder,
                inputs=[folder_input, output_folder_input],
                outputs=[progress_text, output_text, download_btn, final_message_text],
                show_progress=True
            )
        
        with gr.Tab("üìÑ X·ª≠ l√Ω File ri√™ng l·∫ª"):
            with gr.Row():
                with gr.Column(scale=2):
                    file_input = gr.File(
                        label="üìÑ Ch·ªçn file √¢m thanh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu file)",
                        file_count="multiple",
                        file_types=["audio"]
                    )
                    
                    output_folder_input_2 = gr.File(
                        label="üìÇ Ch·ªçn th∆∞ m·ª•c ƒë√≠ch ƒë·ªÉ l∆∞u file ZIP (t√πy ch·ªçn)",
                        file_count="directory"
                    )
                    
                    process_btn = gr.Button(
                        "üöÄ X·ª≠ l√Ω file", 
                        variant="secondary",
                        size="lg"
                    )
                    
                    progress_text_2 = gr.Textbox(
                        label="üìä Ti·∫øn tr√¨nh",
                        value="S·∫µn s√†ng x·ª≠ l√Ω...",
                        interactive=False
                    )
                
                with gr.Column(scale=1):
                    download_btn_2 = gr.File(
                        label="üì¶ T·∫£i file ZIP k·∫øt qu·∫£",
                        visible=False
                    )
            
            output_text_2 = gr.Textbox(
                label="üìã K·∫øt qu·∫£ x·ª≠ l√Ω",
                lines=15,
                max_lines=20,
                interactive=False
            )
            
            final_message_text_2 = gr.Textbox(
                label="üì¢ Th√¥ng b√°o cu·ªëi",
                lines=3,
                interactive=False
            )
            
            # X·ª≠ l√Ω s·ª± ki·ªán file
            def on_process_files(files, output_folder):
                if not files:
                    return "Ch∆∞a ch·ªçn file n√†o!", "", None, ""
                return process_batch_files(files, output_folder)
            
            process_btn.click(
                on_process_files,
                inputs=[file_input, output_folder_input_2],
                outputs=[progress_text_2, output_text_2, download_btn_2, final_message_text_2],
                show_progress=True
            )
        
        # Th√™m footer
        gr.Markdown("""
        ---
        **üí° L∆∞u √Ω:** 
        - File output s·∫Ω c√≥ prefix `processed_`
        - K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong folder `SoundFix/[t√™n_folder]_processed_[timestamp]/`
        - H·ªó tr·ª£ file √¢m thanh stereo v√† mono
        - T·ª± ƒë·ªông t·∫°o file ZIP ƒë·ªÉ d·ªÖ d√†ng t·∫£i v·ªÅ
        - **N·∫øu ch·ªçn th∆∞ m·ª•c ƒë√≠ch, file ZIP s·∫Ω ƒë∆∞·ª£c copy t·ª± ƒë·ªông v√†o ƒë√≥**
        - **Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng tab "X·ª≠ l√Ω Folder" ƒë·ªÉ t·ª± ƒë·ªông h√≥a ho√†n to√†n**
        """)
    
    return demo

if __name__ == "__main__":
    demo = create_demo()
    demo.launch(
        server_name="127.0.0.1",
        share=False,
        show_error=True
    )
